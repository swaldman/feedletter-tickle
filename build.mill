//| mill-version: 1.0.0-jvm
//| mill-jvm-version: 21
//| mvnDeps: ["com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION","com.mchange::mill-daemon:0.2.0","com.mchange::untemplate-mill:0.2.0"]
//+---------------------------------------------------------------------------------------------------------

package build

import mill.*, scalalib.*
import mill.api.BuildCtx

import untemplate.mill.*
import com.mchange.milldaemon.DaemonModule

import scala.util.control.NonFatal

object `package` extends DaemonModule with UntemplateModule {
  def scalaVersion = "3.3.6"

  override def scalacOptions = Task { Seq("-deprecation") }

  val pidFilePathFile = BuildCtx.workspaceRoot / ".feedletter-pid-file-path"

  override def runDaemonPidFile = {
    if ( os.exists( pidFilePathFile ) )
      try Some( os.Path( os.read( pidFilePathFile ).trim ) )
      catch {
        case NonFatal(t) =>
          throw new Exception( s"Could not parse absolute path of desired PID file from contents of ${pidFilePathFile}. Please repair or remove this file.", t )
      }
    else {
        val projectDir = BuildCtx.workspaceRoot
        val out = Some( projectDir / "feedletter.pid" )
        out
      }
  }

  def mvnDeps = Seq(
    mvn"com.mchange::feedletter:0.2.0",
    mvn"com.mchange:c3p0-loom:0.11.2"
  )

  // these are now defailts in mill-daemon v0.0.2
  // override def runDaemonOut : os.ProcessOutput = os.InheritRaw
  // override def runDaemonErr : os.ProcessOutput = os.InheritRaw

  // we'll build an index!
  override def untemplateIndexNameFullyQualified : Option[String] = Some("com.mchange.feedletter.UserUntemplates")

  override def untemplateSelectCustomizer: untemplate.Customizer.Selector = { key =>
    var out = untemplate.Customizer.empty

    // to customize, examine key and modify the customer
    // with out = out.copy=...
    //
    // e.g. out = out.copy(extraImports=Seq("draft.*"))

    out = out.copy(extraImports=Seq("com.mchange.feedletter.*","com.mchange.feedletter.style.*"))

    out
  }
}

